@model ProductDetailsModel
@using Nop.Core.Domain.Seo
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }
    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }
}
<!--product breadcrumb-->
@await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_top", additionalData = Model.Id })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            @if (seoSettings.MicrodataEnabled)
            {
                @await Html.PartialAsync("_Microdata", Model)
            }
            <div data-productid="@Model.Id">
                <div class="product-essential">
                    <div class="row">
                        <div class="col-md-5">
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                            <!--product pictures-->
                            @await Html.PartialAsync("_ProductDetailsPictures", Model)
                        </div>
                        <div class="col-md-7">
                            <div class="overview">
                                @await Html.PartialAsync("_Discontinued", Model)
                                <div class="product-name panel-heading">
                                    <h1>
                                        @Model.Name
                                    </h1>
                                </div>
                                @if (!string.IsNullOrEmpty(Model.ShortDescription))
                                {
                                    <div class="short-description">
                                        @Html.Raw(Model.ShortDescription)
                                    </div>
                                }
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                                <!--product reviews-->
                                @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                                <!--product manufacturers-->
                                @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                                <!--compare, email a friend-->
                                <div class="overview-buttons">
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                                    @await Html.PartialAsync("_CompareProductsButton", Model)
                                    @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                                </div>
                                <!--price breaks-->
                                @await Html.PartialAsync("_ShareButton", Model)
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                            </div>
                        </div>
                        <div class="col-xs-12 col-sm-12 col-md-12">
                            <div class="product-details-tabs">
                                <ul class="nav nav-tabs col-xs-12 col-sm-12 col-md-3">
                                    @if (!string.IsNullOrEmpty(Model.FullDescription))
                                    {
                                        <li class="active"><a href="#description" data-toggle="tab">@T("account.vendorinfo.description")</a></li>
                                    }
                                    @if (Model.ProductSpecifications.Count > 0)
                                    {
                                    <li><a href="#specification" data-toggle="tab">@T("Products.Specs")</a></li>
                                    }
                                    @if (Model.TierPrices.Count > 0)
                                    {
                                        <li><a href="#tierprices" data-toggle="tab">@T("admin.catalog.products.tierprices")</a></li>
                                    }
                                    @if (Model.ProductTags.Count > 0)
                                    {
                                        <li><a href="#tags" data-toggle="tab">@T("Products.Tags")</a></li>
                                    }
                                </ul>
                                <div class="tab-content col-xs-12 col-sm-12 col-md-9">
                                    @if (!string.IsNullOrEmpty(Model.FullDescription))
                                    {
                                        <div class="full-description tab-pane fade in active" id="description">
                                            @Html.Raw(Model.FullDescription)
                                        </div>
                                    }
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                                    <div class="product-specification tab-pane fade" id="specification">
                                        @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                                    </div>
                                    <div class="product-tags tab-pane fade" id="tags">
                                        @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                                    </div>
                                    <div class="product-tierprices tab-pane fade" id="tierprices">
                                        @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                <div class="product-collateral">
                    <!--associated products-->
                    <div class="product-variant-list row">
                        @foreach (var variant in Model.AssociatedProducts)
                        {
                            <div class="product-variant-line col-sm-12 col-md-6" data-productid="@variant.Id">
                                <div class="product-variant-wrapper">
                                    @if (!string.IsNullOrWhiteSpace(variant.DefaultPictureModel.ImageUrl))
                                    {
                                        <div class="variant-picture">
                                            <img alt="@variant.DefaultPictureModel.AlternateText" src="@variant.DefaultPictureModel.ImageUrl"
                                                 title="@variant.DefaultPictureModel.Title" id="main-product-img-@variant.Id" />
                                        </div>
                                    }
                                    <div class="variant-overview">
                                        @if (!string.IsNullOrWhiteSpace(variant.Name))
                                        {
                                            <div class="variant-name">
                                                @variant.Name
                                            </div>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(variant.ShortDescription))
                                        {
                                            <div class="variant-description">
                                                @Html.Raw(variant.ShortDescription)
                                            </div>
                                        }
                                        <!--availability-->
                                        @await Html.PartialAsync("_Availability", variant)
                                        <!--SKU, MAN, GTIN, vendor-->
                                        @await Html.PartialAsync("_SKU_Man_GTIN_Ven", variant)
                                        <!--delivery-->
                                        @await Html.PartialAsync("_DeliveryInfo", variant)
                                        <!--sample download-->
                                        @await Html.PartialAsync("_DownloadSample", variant)
                                        <!--rental info-->
                                        @{
                                            var dataDictRental = new ViewDataDictionary(ViewData);
                                            dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{variant.Id}";
                                            @await Html.PartialAsync("_RentalInfo", variant, dataDictRental)
                                        }
                                        <!--price & add to cart-->
                                        @{
                                            var dataDictPrice = new ViewDataDictionary(ViewData);
                                            dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{variant.Id}";
                                            @await Html.PartialAsync("_ProductPrice", variant.ProductPrice, dataDictPrice)
                                        }
                                        <!--attributes-->
                                        @{
                                            var dataDictAttributes = new ViewDataDictionary(ViewData);
                                            dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{variant.Id}";
                                            @await Html.PartialAsync("_ProductAttributes", variant.ProductAttributes, dataDictAttributes)
                                        }
                                        <!--gift card-->
                                        @{
                                            var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                            dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{variant.Id}";
                                            @await Html.PartialAsync("_GiftCardInfo", variant.GiftCard, dataDictGiftCard)
                                        }
                                        @{
                                            var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{variant.Id}";
                                            @await Html.PartialAsync("_AddToCart", variant.AddToCart, dataDictAddToCart)
                                        }
                                        <!--estimate shipping-->
                                        @{
                                            var dataDictEstimateShipping = new ViewDataDictionary(ViewData);
                                            dataDictEstimateShipping.TemplateInfo.HtmlFieldPrefix = $"estimate_shipping_{variant.Id}";
                                            @await Html.PartialAsync("_ProductEstimateShipping", variant.ProductEstimateShipping, dataDictEstimateShipping)
                                        }
                                        <div class="form-group overview-buttons">
                                            <!--wishlist-->
                                            @{
                                                var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                                dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{variant.Id}";
                                                @await Html.PartialAsync("_AddToWishlist", variant.AddToCart, dataDictAddToWishlist)
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        @if (Model.AssociatedProducts.Count == 0)
                        {
                            <div class="no-associated-products">
                                @T("Products.NoAssociatedProducts")
                            </div>
                        }
                        @*we do not display "also purchased" for grouped products
            @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })*@
                        @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                    </div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
                </div>
            </div>
        </form>
    </div>
</div>

