@model ShoppingCartModel
@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject OrderSettings orderSettings
<div class="order-summary-content">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentBefore })
    @await Html.PartialAsync("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            <div class="panel panel-default cart-item-table">
                <table class="cart table table-bordered">
                    <colgroup>
                        @if (Model.IsEditable)
                        {
                            <col width="1" />
                        }
                        @if (Model.ShowSku)
                        {
                            <col width="1" />
                        }
                        @if (Model.ShowProductImages)
                        {
                            <col width="1" />
                        }
                        @if (Model.ShowVendorName)
                        {
                            <col width="1" />
                        }
                        <col width="1" />
                        <col width="1" />
                        <col width="1" />
                        <col width="1" />
                    </colgroup>
                    <thead class="hidden-xs">
                        <tr class="cart-header-row">
                            @if (Model.IsEditable)
                            {
                                <th>
                                    @*@T("ShoppingCart.Remove")*@
                                </th>
                            }
                            @if (Model.ShowSku)
                            {
                                <th>
                                    @T("ShoppingCart.SKU")
                                </th>
                            }
                            @if (Model.ShowProductImages)
                            {
                                <th class="picture">
                                    @T("ShoppingCart.Image")
                                </th>
                            }
                            <th class="products-title">
                                @T("ShoppingCart.Product(s)")
                            </th>
                            @if (Model.ShowVendorName)
                            {
                                <th class="vendor">
                                    @T("ShoppingCart.VendorName")
                                </th>
                            }
                            <th>
                                @T("ShoppingCart.UnitPrice")
                            </th>
                            <th>
                                @T("ShoppingCart.Quantity")
                            </th>
                            <th class="end">
                                @T("ShoppingCart.ItemTotal")
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Items)
                        {
                            /* This code used for desktop device */
                            <tr class="cart-item-row hidden-xs desktop-original">
                                @if (Model.IsEditable)
                                {
                                    <td class="remove-from-cart">
                                        @if (item.DisableRemoval)
                                        {
                                            <text>&nbsp;</text>
                                        }
                                        else
                                        {
                                            <span class="visible-xs hidden-lg hidden-md hidden-sm" for="removefromcart@(item.Id)">@T("ShoppingCart.Remove")</span>
                                            <input type="checkbox" name="removefromcart" value="@(item.Id)" class="removefromcart" id="removefromcart@(item.Id)" aria-label="@T("ShoppingCart.Remove")" />
                                            <img class="removefromcartimg" src="~/Themes/BakeDelightsTheme/Content/images/remove-icon.png" data-productid="@(item.Id)" />
                                        }
                                    </td>
                                }
                                @if (Model.ShowSku)
                                {
                                    <td class="sku nobr">
                                        @item.Sku
                                    </td>
                                }
                                @if (Model.ShowProductImages)
                                {
                                    <td class="product-picture">
                                        <a href="@Url.RouteUrl("Product", new {SeName = item.ProductSeName})"><img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" /></a>
                                    </td>
                                }
                                <td class="product">
                                    <a href="@Url.RouteUrl(" Product", new { SeName=item.ProductSeName })">@item.ProductName</a>
                                    @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                    {
                                        <div class="attributes">
                                            @Html.Raw(item.AttributeInfo)
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(item.RecurringInfo))
                                    {
                                        <div class="recurring-info">
                                            @Html.Raw(item.RecurringInfo)
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(item.RentalInfo))
                                    {
                                        <div class="rental-info">
                                            @Html.Raw(item.RentalInfo)
                                        </div>
                                    }
                                    @if (Model.IsEditable && item.AllowItemEditing)
                                    {
                                        var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName }, webHelper.CurrentRequestProtocol);
                                        editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id.ToString());
                                        <div class="edit-item">
                                            <a href="@editCartItemUrl">@T("Common.Edit")</a>
                                        </div>
                                    }
                                    @if (item.Warnings.Count > 0)
                                    {
                                        <div class="message-error">
                                            <ul>
                                                @foreach (var warning in item.Warnings)
                                                {
                                                    <li>@Html.Raw(warning)</li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                </td>
                                @if (Model.ShowVendorName)
                                {
                                    <td class="vendor">
                                        <label class="td-title">@T("ShoppingCart.VendorName"):</label>
                                        <span class="vendor-name">@item.VendorName</span>
                                    </td>
                                }
                                <td class="unit-price nobr">
                                    <span class="product-unit-price">@item.UnitPrice</span>
                                </td>
                                <td class="qty nobr">
                                    @if (Model.IsEditable)
                                    {
                                        if (item.AllowedQuantities.Count > 0)
                                        {
                                            <select name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" class="qty-dropdown form-control">
                                                @foreach (var qty in item.AllowedQuantities)
                                                {
                                                    <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                                }
                                            </select>
                                        }
                                        else
                                        {
                                            <input name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input form-control" aria-label="@T("ShoppingCart.Quantity")" />
                                        }

                                    }
                                    else
                                    {
                                        <span>@item.Quantity</span>
                                    }
                                </td>
                                <td class="subtotal nobr end">
                                    <span class="product-subtotal">@item.SubTotal</span>
                                    @if (!string.IsNullOrEmpty(item.Discount))
                                    {
                                        <div class="discount">
                                            @T("ShoppingCart.ItemYouSave", item.Discount)
                                        </div>
                                        if (item.MaximumDiscountedQty.HasValue)
                                        {
                                            <div class="discount-additional-info">
                                                @T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
                                            </div>
                                        }
                                    }
                                </td>
                            </tr>
                            /* This code used only for mobile device */
                            <tr class="shopping-cart-small-wrapper visible-xs mobile-duplicate">
                                <td>
                                    <div class="product-wrapper">
                                        <div class="remove-addtocart-checkbox">
                                            @if (Model.IsEditable)
                                            {
                                                <div class="remove-from-cart">
                                                    @if (item.DisableRemoval)
                                                    {
                                                        <text>&nbsp;</text>
                                                    }
                                                    else
                                                    {
                                                        <div class="custom-checkbox">
                                                            <input type="checkbox" name="removefromcart" value="@(item.Id)" id="@(item.Id)-res" class="removefromcart" />
                                                            <img class="removefromcartimg" src="~/Themes/BakeDelightsTheme/Content/images/remove-icon.png" data-productid="@(item.Id)" />
                                                            <label for="@(item.Id)-res"></label>
                                                        </div>
                                                    }
                                                    @*<span>@T("ShoppingCart.Remove")</span>*@
                                                </div>
                                            }
                                        </div>
                                        <div class="product-content-wrapper">
                                            <div class="product-image">
                                                @if (Model.ShowProductImages)
                                                {
                                                    <div class="product-picture">
                                                        <a href="@Url.RouteUrl("Product", new {SeName = item.ProductSeName})"><img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" /></a>
                                                    </div>
                                                }
                                            </div>
                                            <div class="product-name-sku">
                                                <div class="product">
                                                    <a href="@Url.RouteUrl(" Product", new { SeName=item.ProductSeName })">@item.ProductName</a>
                                                    @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                                    {
                                                        <div class="attributes">
                                                            @Html.Raw(item.AttributeInfo)
                                                        </div>
                                                    }
                                                    @if (!string.IsNullOrEmpty(item.RecurringInfo))
                                                    {
                                                        <div class="recurring-info">
                                                            @Html.Raw(item.RecurringInfo)
                                                        </div>
                                                    }
                                                    @if (item.Warnings.Count > 0)
                                                    {
                                                        <div class="message-error">
                                                            <ul>
                                                                @for (int i = 0; i < item.Warnings.Count; i++)
                                                                {
                                                                    <li>@item.Warnings[i]</li>
                                                                }
                                                            </ul>
                                                        </div>
                                                    }
                                                </div>
                                                @if (Model.ShowSku)
                                                {
                                                    <div class="sku nobr">
                                                        @T("ShoppingCart.SKU"):
                                                        @item.Sku
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        <table>
                                            <thead>
                                                <tr>
                                                    <th>
                                                        @T("ShoppingCart.UnitPrice")
                                                    </th>
                                                    <th>
                                                        @T("ShoppingCart.Quantity")
                                                    </th>
                                                    <th class="end">
                                                        @T("ShoppingCart.ItemTotal")
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr class="cart-item-row">
                                                    <td class="unit-price nobr">
                                                        <span class="product-unit-price">@item.UnitPrice</span>
                                                    </td>
                                                    <td class="qty nobr">
                                                        @if (Model.IsEditable)
                                                        {
                                                            if (item.AllowedQuantities.Count > 0)
                                                            {
                                                                <select name="itemquantity@(item.Id)" class="qty-dropdown form-control">
                                                                    @foreach (var qty in item.AllowedQuantities)
                                                                    {
                                                                        <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                                                    }
                                                                </select>
                                                            }
                                                            else
                                                            {
                                                                <input name="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input form-control" />
                                                            }

                                                        }
                                                        else
                                                        {
                                                            <span>@item.Quantity</span>
                                                        }
                                                    </td>
                                                    <td class="subtotal nobr end">
                                                        <span class="product-subtotal">@item.SubTotal</span>
                                                        @if (!string.IsNullOrEmpty(item.Discount))
                                                        {
                                                            <div class="discount">
                                                                @T("ShoppingCart.ItemYouSave"): @item.Discount
                                                            </div>
                                                            if (item.MaximumDiscountedQty.HasValue)
                                                            {
                                                                <div class="discount-additional-info">
                                                                    @T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
                                                                </div>
                                                            }
                                                        }
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                @if (Model.IsEditable)
                {
                    <div class="update-continue-button">
                        <div class="common-buttons pull-right">
                            <div class="continue-shopping"><input type="submit" name="continueshopping" value="@T(" ShoppingCart.ContinueShopping")" class="btn btn-default continue-shopping-button" /></div>
                            <div class="update-cart"><input type="submit" name="updatecart" onclick="ordertable();" value="@T(" ShoppingCart.UpdateCart")" class="btn btn-primary update-cart-button" /></div>
                            @await Component.InvokeAsync("ShoppingCartEstimateShipping")
                        </div>
                    </div>
                }
            </div>
            @if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <div class="tax-shipping-info">
                    @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                </div>
            }
            <div class="buttons checkout-attribute">
                @if (Model.IsEditable)
                {
                    @await Html.PartialAsync("_CheckoutAttributes", Model)
                }
                <div class="selected-checkout-attributes">
                    @await Component.InvokeAsync("SelectedCheckoutAttributes")
                </div>
            </div>
            <div class="cart-footer row">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryCartFooter })
                @if (Model.IsEditable)
                {
                    if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                    {
                        <div class="col-md-12">
                            <div class="min-amount-warning">
                                @Model.MinOrderSubtotalWarning
                            </div>
                        </div>
                    }
                }
                @if (Model.IsEditable)
                {
                    <div class="col-sm-6 col-md-4">
                        <div class="cart-collaterals">
                            <div class="deals">
                                @await Html.PartialAsync("_GiftCardBox", Model.GiftCardBox)
                            </div>
                        </div>
                    </div>
                }
                @if (Model.IsEditable)
                {

                    <div class="col-sm-6 col-md-4">
                        <div class="cart-collaterals">
                            <div class="deals">
                                @await Html.PartialAsync("_DiscountBox", Model.DiscountBox)
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentDeals })
                            </div>
                        </div>
                    </div>
                }
                <div class="col-xs-offset-0 col-sm-offset-3 col-md-offset-0 col-xs-12 col-sm-6 col-md-4 pull-right order-totals">
                    <div class="totals">
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryTotals })
                        @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })
                        @if (Model.IsEditable)
                        {
                            if (Model.TermsOfServiceOnShoppingCartPage)
                            {
                                <div class="modal fade" id="terms-of-service-warning-box" tabindex="-1" role="dialog" aria-labelledby="@T(" Checkout.TermsOfService")" aria-hidden="true">
                                    <div class="modal-dialog modal-sm">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                                                <h4 class="modal-title">@T("Checkout.TermsOfService")</h4>
                                            </div>
                                            <div class="modal-body">
                                                <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="terms-of-service">
                                    <input id="termsofservice" type="checkbox" name="termsofservice" />
                                    @if (Model.TermsOfServicePopup)
                                    {
                                        <p>
                                            <label for="termsofservice">
                                                @T("Checkout.TermsOfService.IAccept")
                                                <a class="read" id="read-terms">
                                                    @T("Checkout.TermsOfService.Read")
                                                </a>
                                            </label>
                                        </p>
                                        <script asp-location="Footer">
                                           $(document).ready(function() {
                                               $('#read-terms').on('click', function(e) {
                                                   e.preventDefault();
                                                   displayPopupContentFromUrl('@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})', '@T("Checkout.TermsOfService")');
                                               });
                                           });
                                        </script>
                                    }
                                    else
                                    {
                                        <a class="read" id="read-terms" href="@Url.RouteUrl(" Topic", new {SeName=Html.GetTopicSeName("conditionsofuse") })">@T("Checkout.TermsOfService.Read")</a>
                                    }
                                </div>
                            }
                            <div class="checkout-buttons">
                                @if (string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
                                {
                                    <script asp-location="Footer">
                                        $(document).ready(function () {
                                            $('#checkout').on('click', function () {
                                                //terms of services
                                                var termOfServiceOk = true;
                                                if ($('#termsofservice').length > 0) {
                                                    //terms of service element exists

                                                    if (!$('#termsofservice').is(':checked')) {
                                                        //$("#terms-of-service-warning-box").dialog();
                                                        $("#terms-of-service-warning-box").modal();
                                                        termOfServiceOk = false;
                                                    }
                                                    else {
                                                        termOfServiceOk = true;
                                                    }

                                                }
                                                return termOfServiceOk;
                                            });
                                        });
                                    </script>
                                    if (orderSettings.CheckoutDisabled)
                                    {
                                        <div class="checkout-disabled">
                                            @T("Checkout.Disabled")
                                        </div>
                                    }
                                    else
                                    {
                                        <button type="submit" id="checkout" name="checkout" value="checkout" class="btn btn-primary btn-lg checkout-button checkout-new">
                                            <i class="fa fa-shopping-basket"></i> <span>@T("Checkout.Button")</span>
                                        </button>
                                    }

                                }
                            </div>
                            <div class="addon-buttons">
                                @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                                @foreach (var pm in Model.ButtonPaymentMethodViewComponentNames)
                                {
                                    @await Component.InvokeAsync(pm)
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            @if (Model.IsEditable)
            {
                @await Component.InvokeAsync("CrossSellProducts")
            }
        </form>
    }
    else
    {
        <div class="no-data">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentAfter })
</div>
@*JavaScript for mobile and desktop resize*@
<script type="text/javascript">
    function ordertable() {
        var docWidth = $(document).width();
        if (docWidth > 767) {
            //mobile
            $("tr.mobile-duplicate").html("");
        } else {
            //desktop
            $("tr.desktop-original").html("");
        }
    }
</script>
<script type="text/javascript" asp-location="Footer">
    $(document).ready(function () {
        $('.removefromcartimg').click(function (e) {
            var productId = $(this).attr("data-productid");
            $(":checkbox").filter(function () {
                return this.value == productId;
            }).prop("checked", "true");
            $(".update-cart-button").trigger("click");
        });
    });
</script>
